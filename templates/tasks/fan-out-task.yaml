apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: fan-out-task
spec:
  params:
    - name: ADDED_FILES
      description: List of added files in the commit
      type: string
      default: ""
    - name: REMOVED_FILES
      description: List of removed files in the commit
      type: string
      default: ""
    - name: MODIFIED_FILES
      description: List of modified files in the commit
      type: string
      default: ""
    - name: TARGET_PIPELINE
      description: Name of the Tekton pipeline to trigger for each file
      type: string
      default: "downstream-pipeline"
    - name: GIT_URL
      description: The git repository url
      type: string
      default: ""
    - name: GIT_REPO_NAME
      description: The name of the deployment to be created / patched
      type: string
      default: ""
    - name: GIT_BRANCH
      description: The git branch name
      type: string
      default: "main"
    - name: GIT_SHORT_REVISION
      description: Seven character git sha
      type: string
      default: ""
    - name: GIT_COMMIT_AUTHOR
      description: Author of the git commit
      type: string
      default: ""
  steps:
    - name: process-files
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/bash

        curl -sL https://mirror.openshift.com/pub/openshift-v4/clients/pipeline/latest/tkn-linux-amd64.tar.gz | tar --no-same-owner -xzf - -C /tmp tkn 
        chmod -R 755 /tmp/tkn

        set -euo pipefail

        echo "Added files: $(params.ADDED_FILES)"
        echo "Removed files: $(params.REMOVED_FILES)"
        echo "Modified files: $(params.MODIFIED_FILES)"

        echo "Git URL: $(params.GIT_URL)"
        echo "Git Repo Name: $(params.GIT_REPO_NAME)"
        echo "Git Branch: $(params.GIT_BRANCH)"
        echo "Git Short Revision: $(params.GIT_SHORT_REVISION)"
        echo "Git Commit Author: $(params.GIT_COMMIT_AUTHOR)"

        # Combine ADDED + MODIFIED into one list, split by comma, deduplicate
        all_files=$(echo "$(params.ADDED_FILES),$(params.MODIFIED_FILES)" | tr ',' '\n' | sed '/^$/d' | sort -u)

        echo "Final unique files:"
        echo "$all_files"

        # Trigger a pipeline for each file in background (parallel)
        for f in $all_files; do
          echo "Triggering pipeline $(params.TARGET_PIPELINE) for file: $f"
          model_name="${f%.json}"
          /tmp/tkn pipeline start $(params.TARGET_PIPELINE) --prefix-name ${model_name} \
            -p GIT_URL="$(params.GIT_URL)" \
            -p PROJECT_NAME="fika" \
            -p GIT_REPO_NAME="$(params.GIT_REPO_NAME)" \
            -p GIT_BRANCH="$(params.GIT_BRANCH)" \
            -p GIT_SHORT_REVISION="$(params.GIT_SHORT_REVISION)" \
            -p GIT_COMMIT_AUTHOR="$(params.GIT_COMMIT_AUTHOR)" \
            -p MODEL_NAME="$model_name" \
            --workspace name=shared-workspace,claimName=shared-workspace \
            --workspace name=model-workspace,claimName=model-pvc \
            --showlog &
        done

        # Wait for all background jobs
        wait
